set pastetoggle=<F1>                            " Toggle pastemode, doesn't indent
set hidden                                      " buffer change, more undo
set history=1000                                " default 20
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.  " Highlight problematic whitespace
" set cursorline                              " hilight cursor line
set scrolloff=3                             " lines above/below cursor
set showcmd                                 " show cmds being typed
set title                                   " window title
set wildmenu                                " better auto complete
set wildmode=list:longest,full              " bash-like auto complete
set shortmess+=I                                " disable startup message
set splitbelow                                  " splits go below w/focus
set splitright                                  " vsplits go right w/focus
" Folding
set foldcolumn=0                            " hide folding column
set foldmethod=indent                       " folds using indent
set foldnestmax=10                          " max 10 nested folds
set foldlevelstart=99                       " folds open by default
" Files
set noautowrite                                 " never autowrite
set confirm                                     " confirm changed files
set nobackup                                    " disable backups
" Persistent undo. Requires Vim 7.3
if has('persistent_undo') && exists("&undodir")
    set undodir=$HOME/.vim/undo/            " where to store undofiles
    set undofile                            " enable undofile
    set undolevels=500                      " max undos stored
    set undoreload=10000                    " buffer stored undos
endif
" Text formatting
set autoindent                                  " preserve indentation
set backspace=indent,eol,start                  " smart backspace
set cinkeys-=0#                                 " don't force # indentation
set expandtab                                   " no real tabs
set ignorecase                                  " by default ignore case
set nrformats+=alpha                            " incr/decr letters C-a/-x
set shiftround                                  " be clever with tabs
set shiftwidth=4                                " default 8
set smartcase                                   " sensitive with uppercase
set smarttab                                    " tab to 0,4,8 etc.
set softtabstop=4                               " "tab" feels like <tab>
set tabstop=4                                   " replace <TAB> w/4 spaces

"*****************************************************************************
"" Functions
"*****************************************************************************
" Remove multiple empty lines
function! DeleteMultipleEmptyLines()
    g/^\_$\n\_^$/d
endfunction
nnoremap <leader>ld :call DeleteMultipleEmptyLines()<CR>

"*****************************************************************************
"" Mappings
"*****************************************************************************
" Treat wrapped lines as normal lines
nnoremap j gj
nnoremap k gk

" Let's make escape better, together.
inoremap jk <Esc>
inoremap JK <Esc>
inoremap Jk <Esc>
inoremap jK <Esc>

" shortcuts for windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Buffers, preferred over tabs now with bufferline.
nnoremap gn :bnext<CR>
nnoremap gN :bprevious<CR>
nnoremap gd :bdelete<CR>
nnoremap gf <C-^>

" Allow using the repeat operator with a visual selection (!)
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<CR>

" Fold levels
nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>

" Clear search
noremap <silent><leader>/ :nohls<CR>
" Paste in new line
nmap <leader>p o<ESC>p

" Format a json file with Python's built in json.tool.
" from https://github.com/spf13/spf13-vim/blob/3.0/.vimrc#L390
nnoremap <leader>jt <Esc>:%!underscore print<CR><Esc>:set filetype=json<CR>
nnoremap <leader>jts <Esc>:%!underscore print --strict<CR><Esc>:set filetype=json<CR>

" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" Yank(copy) to system clipboard
noremap <leader>y "+y

" Removed undesired bindings
unmap P

"*****************************************************************************
"" Plugin post-configurations
"*****************************************************************************
" ctrlp {
if isdirectory(expand("~/.vim/bundle/ctrlp.vim/"))
    let g:ctrlp_working_path_mode = 'rw'
    let g:ctrlp_regexp = 1

    if executable('ag')
        " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
        let g:ctrlp_user_command =
                    \ 'ag %s --files-with-matches -g "" --ignore "\.git$\|\.hg$\|\.svn$"'
    endif

    " Mappings
    nmap <leader>l :CtrlP
    nmap <leader>lw :CtrlP<CR><C-\>w
    vmap <leader>lw :CtrlP<CR><C-\>v

    if isdirectory(expand("~/.vim/bundle/ctrlp-funky/"))
        " CtrlP extensions
        let g:ctrlp_extensions = ['funky']

        " funky
        nnoremap <Leader>lf :CtrlPFunky<Cr>
        " narrow the list down with a word under cursor
        nnoremap <Leader>lfw :execute 'CtrlPFunky ' .  expand('<cword>')<Cr>>)
    endif
endif
"}

if isdirectory(expand("~/.vim/bundle/YouCompleteMee/"))
    " enable completion from tags
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_seed_identifiers_with_syntax        = 1 " completion for language keyword
    let g:ycm_complete_in_comments                = 0 " Completion in comments
    let g:ycm_complete_in_strings                 = 1 " Completion in string
    let g:ycm_min_num_identifier_candidate_chars  = 2
    let g:ycm_semantic_triggers = {'haskell' : ['.']}

    " Disable the neosnippet preview candidate window
    " When enabled, there can be too much visual noise
    " especially when splits are used.
    set completeopt-=preview
endif

" remap Ultisnips for compatibility for YCM
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

" Ag {
let g:agprg = 'ag --nogroup --nocolor --column --smart-case'
"let g:ag_highlight = 1

" Tabularize {
if isdirectory(expand("~/.vim/bundle/tabular"))
    nmap <Leader>a& :Tabularize /&<CR>
    vmap <Leader>a& :Tabularize /&<CR>
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>
    nmap <Leader>a=> :Tabularize /=><CR>
    vmap <Leader>a=> :Tabularize /=><CR>
    nmap <Leader>a: :Tabularize /:<CR>
    vmap <Leader>a: :Tabularize /:<CR>
    nmap <Leader>a:: :Tabularize /:\zs<CR>
    vmap <Leader>a:: :Tabularize /:\zs<CR>
    nmap <Leader>a, :Tabularize /,<CR>
    vmap <Leader>a, :Tabularize /,<CR>
    nmap <Leader>a,, :Tabularize /,\zs<CR>
    vmap <Leader>a,, :Tabularize /,\zs<CR>
    nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
    vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
endif

" UndoTree {
if isdirectory(expand("~/.vim/bundle/gundo.vim/"))
    nnoremap <Leader>u :GundoToggle<CR>
endif

" Ag {
nnoremap <Leader>ag :execute 'Ag ' .  expand('<cword>')<Cr>>)
vnoremap <Leader>ag y:Ag -Q '<C-R>"'<CR>


" vdebug {
let g:vdebug_options= {
            \    "port" : 9001,
            \    "server" : '192.168.98.10',
            \    "timeout" : 20,
            \    "on_close" : 'detach',
            \    "break_on_open" : 1,
            \    "ide_key" : '',
            \    "path_maps" : {"/usr/share/isis-dev": "/home/dev/isis"},
            \    "debug_window_level" : 0,
            \    "debug_file_level" : 0,
            \    "debug_file" : "",
            \    "watch_window_style" : 'expanded',
            \    "marker_default" : '⬦',
            \    "marker_closed_tree" : '▸',
            \    "marker_open_tree" : '▾'
            \}

" Nerd Tree {
unlet g:NERDTreeWinSize
let NERDTreeQuitOnOpen=1

"*****************************************************************************
"" Filetype specific
"*****************************************************************************
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" enable autocomplete of html tags
autocmd FileType html,xhtml,xml,phtml source ~/.vim/bundle/HTML-AutoCloseTag/ftplugin/html_autoclosetag.vim

